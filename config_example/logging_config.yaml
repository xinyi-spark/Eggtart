version: 1
disable_existing_loggers: True
formatters:
    verbose:
        format: '%(levelname)s-[%(asctime)s][%(module)s][%(funcName)s][%(lineno)d]: %(message)s'
    simple:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
handlers:
    null:
        class: logging.NullHandler
        level: DEBUG
    console_stdout:
        class: logging.StreamHandler
        level: INFO
        formatter: verbose
        stream: ext://sys.stdout
    console_stderr:
        class: logging.StreamHandler
        level: DEBUG
        formatter: verbose
        stream: ext://sys.stderr
    file_info:
        class: cloghandler.ConcurrentRotatingFileHandler
        level: DEBUG
        formatter: verbose
        maxBytes: 1024 * 1024 * 10   # 当达到10MB时分割日志  
        backupCount: 100              # 最多保留10份文件 
        delay: True                  # If delay is true, file opening is deferred until the first call to emit
        filename: engine_info.log
    file_debug:
        class: cloghandler.ConcurrentRotatingFileHandler
        level: DEBUG
        formatter: verbose
        maxBytes: 1024 * 1024 * 10   # 当达到10MB时分割日志  
        backupCount: 100              # 最多保留10份文件 
        delay: True                  # If delay is true, file opening is deferred until the first call to emit
        filename: engine_debug.log
    file_error:
        class: cloghandler.ConcurrentRotatingFileHandler
        level: DEBUG
        formatter: verbose
        maxBytes: 1024 * 1024 * 10   # 当达到10MB时分割日志  
        backupCount: 100              # 最多保留10份文件 
        delay: True                  # If delay is true, file opening is deferred until the first call to emit
        filename: engine_error.log
loggers:
    console_stdout:  # 和print输出的位置相同，默认为终端
        level: INFO
        handlers: [console_stdout]
        propagate: no # 为1表示将消息传递给高层次logger的handler，为0表示不传播
    console_stderr:  # 和代码出错时python默认输出的提示信息的位置相同，默认为终端
        level: DEBUG
        handlers: [console_stderr]
        propagate: no # 为1表示将消息传递给高层次logger的handler，为0表示不传播
    file_info:  # 输出基本日志信息时使用
        level: INFO
        handlers: [file_info]
        propagate: no
    file_debug:  # 输出调试日志信息时使用
        level: DEBUG
        handlers: [file_debug]
        propagate: no
    file_error:  # 输出捕捉到的错误日志信息时使用
        level: ERROR
        handlers: [file_error]
        propagate: no